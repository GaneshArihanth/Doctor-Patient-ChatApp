{"ast":null,"code":"var _jsxFileName = \"/Users/ganesharihanth/Desktop/App/doctor-patient-chat/client/src/components/chat/AudioVisualizer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useCallback } from 'react';\nimport { Box, keyframes } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\n * AudioVisualizer component that displays a visual representation of audio data\n * from an AnalyserNode. It can be used to visualize microphone input or audio playback.\n */\nconst AudioVisualizer = ({\n  analyser,\n  width = '100%',\n  height = 40,\n  color = '#3f51b5',\n  pulse = true,\n  className = ''\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const animationFrameId = useRef();\n  const lastVolume = useRef(0);\n\n  // Smoothing factor for volume changes (0-1, higher = smoother)\n  const SMOOTHING_FACTOR = 0.7;\n\n  // Animation loop for drawing the visualization\n  const draw = useCallback(() => {\n    if (!analyser || !canvasRef.current) {\n      animationFrameId.current = requestAnimationFrame(draw);\n      return;\n    }\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      animationFrameId.current = requestAnimationFrame(draw);\n      return;\n    }\n\n    // Set canvas dimensions\n    const dpr = window.devicePixelRatio || 1;\n    const rect = canvas.getBoundingClientRect();\n    if (canvas.width !== rect.width * dpr || canvas.height !== rect.height * dpr) {\n      canvas.width = rect.width * dpr;\n      canvas.height = rect.height * dpr;\n      ctx.scale(dpr, dpr);\n      canvas.style.width = `${rect.width}px`;\n      canvas.style.height = `${rect.height}px`;\n    }\n\n    // Get audio data\n    const bufferLength = analyser.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    analyser.getByteFrequencyData(dataArray);\n\n    // Calculate volume (RMS)\n    let sum = 0;\n    for (let i = 0; i < bufferLength; i++) {\n      sum += (dataArray[i] / 255) ** 2;\n    }\n    const rms = Math.sqrt(sum / bufferLength);\n\n    // Smooth volume changes\n    const smoothedVolume = lastVolume.current * SMOOTHING_FACTOR + rms * (1 - SMOOTHING_FACTOR);\n    lastVolume.current = smoothedVolume;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Draw waveform\n    const barWidth = canvas.width / bufferLength * 2.5;\n    let x = 0;\n\n    // Adjust bar count based on width to maintain performance\n    const skip = Math.max(1, Math.floor(bufferLength / (rect.width / 3)));\n    for (let i = 0; i < bufferLength; i += skip) {\n      const barHeight = dataArray[i] / 255 * (canvas.height * 0.8);\n\n      // Scale height by volume for more dynamic visualization\n      const scaledHeight = barHeight * (0.5 + smoothedVolume * 0.5);\n\n      // Calculate color based on frequency and volume\n      const hue = i / bufferLength * 240; // 0-240 for blue to red\n      const saturation = 70 + smoothedVolume * 30; // 70-100%\n      const lightness = 40 + (1 - smoothedVolume) * 30; // 40-70%\n\n      ctx.fillStyle = `hsl(${hue}, ${saturation}%, ${lightness}%)`;\n\n      // Draw bar with rounded corners\n      const y = (canvas.height - scaledHeight) / 2;\n      const radius = barWidth * 0.4;\n      ctx.beginPath();\n      ctx.moveTo(x + radius, y);\n      ctx.lineTo(x + barWidth - radius, y);\n      ctx.quadraticCurveTo(x + barWidth, y, x + barWidth, y + radius);\n      ctx.lineTo(x + barWidth, y + scaledHeight - radius);\n      ctx.quadraticCurveTo(x + barWidth, y + scaledHeight, x + barWidth - radius, y + scaledHeight);\n      ctx.lineTo(x + radius, y + scaledHeight);\n      ctx.quadraticCurveTo(x, y + scaledHeight, x, y + scaledHeight - radius);\n      ctx.lineTo(x, y + radius);\n      ctx.quadraticCurveTo(x, y, x + radius, y);\n      ctx.closePath();\n      ctx.fill();\n      x += barWidth + 1;\n    }\n\n    // Draw center line if volume is very low\n    if (smoothedVolume < 0.05) {\n      ctx.strokeStyle = `rgba(255, 255, 255, ${0.2 + Math.sin(Date.now() / 300) * 0.3})`;\n      ctx.lineWidth = 1;\n      ctx.beginPath();\n      ctx.moveTo(0, canvas.height / 2);\n      ctx.lineTo(canvas.width, canvas.height / 2);\n      ctx.stroke();\n    }\n\n    // Continue animation loop\n    animationFrameId.current = requestAnimationFrame(draw);\n  }, [analyser, color]);\n\n  // Start/stop animation when analyser changes\n  useEffect(() => {\n    if (analyser) {\n      animationFrameId.current = requestAnimationFrame(draw);\n    }\n    return () => {\n      if (animationFrameId.current) {\n        cancelAnimationFrame(animationFrameId.current);\n      }\n    };\n  }, [analyser, draw]);\n\n  // Pulse animation\n  const pulseAnimation = keyframes`\n    0% { opacity: 0.6; transform: scale(0.98); }\n    50% { opacity: 1; transform: scale(1.02); }\n    100% { opacity: 0.6; transform: scale(0.98); }\n  `;\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: `audio-visualizer ${className}`,\n    sx: {\n      width,\n      height,\n      position: 'relative',\n      borderRadius: 2,\n      overflow: 'hidden',\n      bgcolor: 'rgba(0, 0, 0, 0.1)',\n      animation: pulse && analyser ? `${pulseAnimation} 2s infinite ease-in-out` : 'none',\n      transition: 'all 0.3s ease',\n      '&:hover': {\n        boxShadow: `0 0 0 2px ${color}33`\n      }\n    },\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        display: 'block',\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioVisualizer, \"owtES3ykdUtrtKiZZsXPiSwuHMc=\");\n_c = AudioVisualizer;\nexport default AudioVisualizer;\nvar _c;\n$RefreshReg$(_c, \"AudioVisualizer\");","map":{"version":3,"names":["React","useEffect","useRef","useCallback","Box","keyframes","jsxDEV","_jsxDEV","AudioVisualizer","analyser","width","height","color","pulse","className","_s","canvasRef","animationFrameId","lastVolume","SMOOTHING_FACTOR","draw","current","requestAnimationFrame","canvas","ctx","getContext","dpr","window","devicePixelRatio","rect","getBoundingClientRect","scale","style","bufferLength","frequencyBinCount","dataArray","Uint8Array","getByteFrequencyData","sum","i","rms","Math","sqrt","smoothedVolume","clearRect","barWidth","x","skip","max","floor","barHeight","scaledHeight","hue","saturation","lightness","fillStyle","y","radius","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fill","strokeStyle","sin","Date","now","lineWidth","stroke","cancelAnimationFrame","pulseAnimation","sx","position","borderRadius","overflow","bgcolor","animation","transition","boxShadow","children","ref","display","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ganesharihanth/Desktop/App/doctor-patient-chat/client/src/components/chat/AudioVisualizer.tsx"],"sourcesContent":["import React, { useEffect, useRef, useCallback } from 'react';\nimport { Box, keyframes } from '@mui/material';\n\ninterface AudioVisualizerProps {\n  analyser: AnalyserNode | null;\n  width?: number | string;\n  \n  /**\n   * Height of the visualizer in pixels\n   */\n  height?: number | string;\n  \n  /**\n   * Color of the waveform\n   */\n  color?: string;\n  \n  /**\n   * Whether to show a pulsing animation when active\n   */\n  pulse?: boolean;\n  \n  /**\n   * Class name for custom styling\n   */\n  className?: string;\n}\n\n/**\n * AudioVisualizer component that displays a visual representation of audio data\n * from an AnalyserNode. It can be used to visualize microphone input or audio playback.\n */\nconst AudioVisualizer: React.FC<AudioVisualizerProps> = ({\n  analyser,\n  width = '100%',\n  height = 40,\n  color = '#3f51b5',\n  pulse = true,\n  className = '',\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const animationFrameId = useRef<number>();\n  const lastVolume = useRef(0);\n  \n  // Smoothing factor for volume changes (0-1, higher = smoother)\n  const SMOOTHING_FACTOR = 0.7;\n  \n  // Animation loop for drawing the visualization\n  const draw = useCallback(() => {\n    if (!analyser || !canvasRef.current) {\n      animationFrameId.current = requestAnimationFrame(draw);\n      return;\n    }\n    \n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    if (!ctx) {\n      animationFrameId.current = requestAnimationFrame(draw);\n      return;\n    }\n    \n    // Set canvas dimensions\n    const dpr = window.devicePixelRatio || 1;\n    const rect = canvas.getBoundingClientRect();\n    \n    if (canvas.width !== rect.width * dpr || canvas.height !== rect.height * dpr) {\n      canvas.width = rect.width * dpr;\n      canvas.height = rect.height * dpr;\n      ctx.scale(dpr, dpr);\n      canvas.style.width = `${rect.width}px`;\n      canvas.style.height = `${rect.height}px`;\n    }\n    \n    // Get audio data\n    const bufferLength = analyser.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    analyser.getByteFrequencyData(dataArray);\n    \n    // Calculate volume (RMS)\n    let sum = 0;\n    for (let i = 0; i < bufferLength; i++) {\n      sum += (dataArray[i] / 255) ** 2;\n    }\n    const rms = Math.sqrt(sum / bufferLength);\n    \n    // Smooth volume changes\n    const smoothedVolume = lastVolume.current * SMOOTHING_FACTOR + rms * (1 - SMOOTHING_FACTOR);\n    lastVolume.current = smoothedVolume;\n    \n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n    // Draw waveform\n    const barWidth = (canvas.width / bufferLength) * 2.5;\n    let x = 0;\n    \n    // Adjust bar count based on width to maintain performance\n    const skip = Math.max(1, Math.floor(bufferLength / (rect.width / 3)));\n    \n    for (let i = 0; i < bufferLength; i += skip) {\n      const barHeight = (dataArray[i] / 255) * (canvas.height * 0.8);\n      \n      // Scale height by volume for more dynamic visualization\n      const scaledHeight = barHeight * (0.5 + smoothedVolume * 0.5);\n      \n      // Calculate color based on frequency and volume\n      const hue = (i / bufferLength) * 240; // 0-240 for blue to red\n      const saturation = 70 + smoothedVolume * 30; // 70-100%\n      const lightness = 40 + (1 - smoothedVolume) * 30; // 40-70%\n      \n      ctx.fillStyle = `hsl(${hue}, ${saturation}%, ${lightness}%)`;\n      \n      // Draw bar with rounded corners\n      const y = (canvas.height - scaledHeight) / 2;\n      const radius = barWidth * 0.4;\n      \n      ctx.beginPath();\n      ctx.moveTo(x + radius, y);\n      ctx.lineTo(x + barWidth - radius, y);\n      ctx.quadraticCurveTo(x + barWidth, y, x + barWidth, y + radius);\n      ctx.lineTo(x + barWidth, y + scaledHeight - radius);\n      ctx.quadraticCurveTo(x + barWidth, y + scaledHeight, x + barWidth - radius, y + scaledHeight);\n      ctx.lineTo(x + radius, y + scaledHeight);\n      ctx.quadraticCurveTo(x, y + scaledHeight, x, y + scaledHeight - radius);\n      ctx.lineTo(x, y + radius);\n      ctx.quadraticCurveTo(x, y, x + radius, y);\n      ctx.closePath();\n      ctx.fill();\n      \n      x += barWidth + 1;\n    }\n    \n    // Draw center line if volume is very low\n    if (smoothedVolume < 0.05) {\n      ctx.strokeStyle = `rgba(255, 255, 255, ${0.2 + Math.sin(Date.now() / 300) * 0.3})`;\n      ctx.lineWidth = 1;\n      ctx.beginPath();\n      ctx.moveTo(0, canvas.height / 2);\n      ctx.lineTo(canvas.width, canvas.height / 2);\n      ctx.stroke();\n    }\n    \n    // Continue animation loop\n    animationFrameId.current = requestAnimationFrame(draw);\n  }, [analyser, color]);\n  \n  // Start/stop animation when analyser changes\n  useEffect(() => {\n    if (analyser) {\n      animationFrameId.current = requestAnimationFrame(draw);\n    }\n    \n    return () => {\n      if (animationFrameId.current) {\n        cancelAnimationFrame(animationFrameId.current);\n      }\n    };\n  }, [analyser, draw]);\n  \n  // Pulse animation\n  const pulseAnimation = keyframes`\n    0% { opacity: 0.6; transform: scale(0.98); }\n    50% { opacity: 1; transform: scale(1.02); }\n    100% { opacity: 0.6; transform: scale(0.98); }\n  `;\n  \n  return (\n    <Box\n      className={`audio-visualizer ${className}`}\n      sx={{\n        width,\n        height,\n        position: 'relative',\n        borderRadius: 2,\n        overflow: 'hidden',\n        bgcolor: 'rgba(0, 0, 0, 0.1)',\n        animation: pulse && analyser ? `${pulseAnimation} 2s infinite ease-in-out` : 'none',\n        transition: 'all 0.3s ease',\n        '&:hover': {\n          boxShadow: `0 0 0 2px ${color}33`,\n        },\n      }}\n    >\n      <canvas\n        ref={canvasRef}\n        style={{\n          display: 'block',\n          width: '100%',\n          height: '100%',\n        }}\n      />\n    </Box>\n  );\n};\n\nexport default AudioVisualizer;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AAC7D,SAASC,GAAG,EAAEC,SAAS,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AA2B/C;AACA;AACA;AACA;AACA,MAAMC,eAA+C,GAAGA,CAAC;EACvDC,QAAQ;EACRC,KAAK,GAAG,MAAM;EACdC,MAAM,GAAG,EAAE;EACXC,KAAK,GAAG,SAAS;EACjBC,KAAK,GAAG,IAAI;EACZC,SAAS,GAAG;AACd,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,SAAS,GAAGd,MAAM,CAAoB,IAAI,CAAC;EACjD,MAAMe,gBAAgB,GAAGf,MAAM,CAAS,CAAC;EACzC,MAAMgB,UAAU,GAAGhB,MAAM,CAAC,CAAC,CAAC;;EAE5B;EACA,MAAMiB,gBAAgB,GAAG,GAAG;;EAE5B;EACA,MAAMC,IAAI,GAAGjB,WAAW,CAAC,MAAM;IAC7B,IAAI,CAACM,QAAQ,IAAI,CAACO,SAAS,CAACK,OAAO,EAAE;MACnCJ,gBAAgB,CAACI,OAAO,GAAGC,qBAAqB,CAACF,IAAI,CAAC;MACtD;IACF;IAEA,MAAMG,MAAM,GAAGP,SAAS,CAACK,OAAO;IAChC,MAAMG,GAAG,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;IAEnC,IAAI,CAACD,GAAG,EAAE;MACRP,gBAAgB,CAACI,OAAO,GAAGC,qBAAqB,CAACF,IAAI,CAAC;MACtD;IACF;;IAEA;IACA,MAAMM,GAAG,GAAGC,MAAM,CAACC,gBAAgB,IAAI,CAAC;IACxC,MAAMC,IAAI,GAAGN,MAAM,CAACO,qBAAqB,CAAC,CAAC;IAE3C,IAAIP,MAAM,CAACb,KAAK,KAAKmB,IAAI,CAACnB,KAAK,GAAGgB,GAAG,IAAIH,MAAM,CAACZ,MAAM,KAAKkB,IAAI,CAAClB,MAAM,GAAGe,GAAG,EAAE;MAC5EH,MAAM,CAACb,KAAK,GAAGmB,IAAI,CAACnB,KAAK,GAAGgB,GAAG;MAC/BH,MAAM,CAACZ,MAAM,GAAGkB,IAAI,CAAClB,MAAM,GAAGe,GAAG;MACjCF,GAAG,CAACO,KAAK,CAACL,GAAG,EAAEA,GAAG,CAAC;MACnBH,MAAM,CAACS,KAAK,CAACtB,KAAK,GAAG,GAAGmB,IAAI,CAACnB,KAAK,IAAI;MACtCa,MAAM,CAACS,KAAK,CAACrB,MAAM,GAAG,GAAGkB,IAAI,CAAClB,MAAM,IAAI;IAC1C;;IAEA;IACA,MAAMsB,YAAY,GAAGxB,QAAQ,CAACyB,iBAAiB;IAC/C,MAAMC,SAAS,GAAG,IAAIC,UAAU,CAACH,YAAY,CAAC;IAC9CxB,QAAQ,CAAC4B,oBAAoB,CAACF,SAAS,CAAC;;IAExC;IACA,IAAIG,GAAG,GAAG,CAAC;IACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,YAAY,EAAEM,CAAC,EAAE,EAAE;MACrCD,GAAG,IAAI,CAACH,SAAS,CAACI,CAAC,CAAC,GAAG,GAAG,KAAK,CAAC;IAClC;IACA,MAAMC,GAAG,GAAGC,IAAI,CAACC,IAAI,CAACJ,GAAG,GAAGL,YAAY,CAAC;;IAEzC;IACA,MAAMU,cAAc,GAAGzB,UAAU,CAACG,OAAO,GAAGF,gBAAgB,GAAGqB,GAAG,IAAI,CAAC,GAAGrB,gBAAgB,CAAC;IAC3FD,UAAU,CAACG,OAAO,GAAGsB,cAAc;;IAEnC;IACAnB,GAAG,CAACoB,SAAS,CAAC,CAAC,EAAE,CAAC,EAAErB,MAAM,CAACb,KAAK,EAAEa,MAAM,CAACZ,MAAM,CAAC;;IAEhD;IACA,MAAMkC,QAAQ,GAAItB,MAAM,CAACb,KAAK,GAAGuB,YAAY,GAAI,GAAG;IACpD,IAAIa,CAAC,GAAG,CAAC;;IAET;IACA,MAAMC,IAAI,GAAGN,IAAI,CAACO,GAAG,CAAC,CAAC,EAAEP,IAAI,CAACQ,KAAK,CAAChB,YAAY,IAAIJ,IAAI,CAACnB,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;IAErE,KAAK,IAAI6B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,YAAY,EAAEM,CAAC,IAAIQ,IAAI,EAAE;MAC3C,MAAMG,SAAS,GAAIf,SAAS,CAACI,CAAC,CAAC,GAAG,GAAG,IAAKhB,MAAM,CAACZ,MAAM,GAAG,GAAG,CAAC;;MAE9D;MACA,MAAMwC,YAAY,GAAGD,SAAS,IAAI,GAAG,GAAGP,cAAc,GAAG,GAAG,CAAC;;MAE7D;MACA,MAAMS,GAAG,GAAIb,CAAC,GAAGN,YAAY,GAAI,GAAG,CAAC,CAAC;MACtC,MAAMoB,UAAU,GAAG,EAAE,GAAGV,cAAc,GAAG,EAAE,CAAC,CAAC;MAC7C,MAAMW,SAAS,GAAG,EAAE,GAAG,CAAC,CAAC,GAAGX,cAAc,IAAI,EAAE,CAAC,CAAC;;MAElDnB,GAAG,CAAC+B,SAAS,GAAG,OAAOH,GAAG,KAAKC,UAAU,MAAMC,SAAS,IAAI;;MAE5D;MACA,MAAME,CAAC,GAAG,CAACjC,MAAM,CAACZ,MAAM,GAAGwC,YAAY,IAAI,CAAC;MAC5C,MAAMM,MAAM,GAAGZ,QAAQ,GAAG,GAAG;MAE7BrB,GAAG,CAACkC,SAAS,CAAC,CAAC;MACflC,GAAG,CAACmC,MAAM,CAACb,CAAC,GAAGW,MAAM,EAAED,CAAC,CAAC;MACzBhC,GAAG,CAACoC,MAAM,CAACd,CAAC,GAAGD,QAAQ,GAAGY,MAAM,EAAED,CAAC,CAAC;MACpChC,GAAG,CAACqC,gBAAgB,CAACf,CAAC,GAAGD,QAAQ,EAAEW,CAAC,EAAEV,CAAC,GAAGD,QAAQ,EAAEW,CAAC,GAAGC,MAAM,CAAC;MAC/DjC,GAAG,CAACoC,MAAM,CAACd,CAAC,GAAGD,QAAQ,EAAEW,CAAC,GAAGL,YAAY,GAAGM,MAAM,CAAC;MACnDjC,GAAG,CAACqC,gBAAgB,CAACf,CAAC,GAAGD,QAAQ,EAAEW,CAAC,GAAGL,YAAY,EAAEL,CAAC,GAAGD,QAAQ,GAAGY,MAAM,EAAED,CAAC,GAAGL,YAAY,CAAC;MAC7F3B,GAAG,CAACoC,MAAM,CAACd,CAAC,GAAGW,MAAM,EAAED,CAAC,GAAGL,YAAY,CAAC;MACxC3B,GAAG,CAACqC,gBAAgB,CAACf,CAAC,EAAEU,CAAC,GAAGL,YAAY,EAAEL,CAAC,EAAEU,CAAC,GAAGL,YAAY,GAAGM,MAAM,CAAC;MACvEjC,GAAG,CAACoC,MAAM,CAACd,CAAC,EAAEU,CAAC,GAAGC,MAAM,CAAC;MACzBjC,GAAG,CAACqC,gBAAgB,CAACf,CAAC,EAAEU,CAAC,EAAEV,CAAC,GAAGW,MAAM,EAAED,CAAC,CAAC;MACzChC,GAAG,CAACsC,SAAS,CAAC,CAAC;MACftC,GAAG,CAACuC,IAAI,CAAC,CAAC;MAEVjB,CAAC,IAAID,QAAQ,GAAG,CAAC;IACnB;;IAEA;IACA,IAAIF,cAAc,GAAG,IAAI,EAAE;MACzBnB,GAAG,CAACwC,WAAW,GAAG,uBAAuB,GAAG,GAAGvB,IAAI,CAACwB,GAAG,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG;MAClF3C,GAAG,CAAC4C,SAAS,GAAG,CAAC;MACjB5C,GAAG,CAACkC,SAAS,CAAC,CAAC;MACflC,GAAG,CAACmC,MAAM,CAAC,CAAC,EAAEpC,MAAM,CAACZ,MAAM,GAAG,CAAC,CAAC;MAChCa,GAAG,CAACoC,MAAM,CAACrC,MAAM,CAACb,KAAK,EAAEa,MAAM,CAACZ,MAAM,GAAG,CAAC,CAAC;MAC3Ca,GAAG,CAAC6C,MAAM,CAAC,CAAC;IACd;;IAEA;IACApD,gBAAgB,CAACI,OAAO,GAAGC,qBAAqB,CAACF,IAAI,CAAC;EACxD,CAAC,EAAE,CAACX,QAAQ,EAAEG,KAAK,CAAC,CAAC;;EAErB;EACAX,SAAS,CAAC,MAAM;IACd,IAAIQ,QAAQ,EAAE;MACZQ,gBAAgB,CAACI,OAAO,GAAGC,qBAAqB,CAACF,IAAI,CAAC;IACxD;IAEA,OAAO,MAAM;MACX,IAAIH,gBAAgB,CAACI,OAAO,EAAE;QAC5BiD,oBAAoB,CAACrD,gBAAgB,CAACI,OAAO,CAAC;MAChD;IACF,CAAC;EACH,CAAC,EAAE,CAACZ,QAAQ,EAAEW,IAAI,CAAC,CAAC;;EAEpB;EACA,MAAMmD,cAAc,GAAGlE,SAAS;AAClC;AACA;AACA;AACA,GAAG;EAED,oBACEE,OAAA,CAACH,GAAG;IACFU,SAAS,EAAE,oBAAoBA,SAAS,EAAG;IAC3C0D,EAAE,EAAE;MACF9D,KAAK;MACLC,MAAM;MACN8D,QAAQ,EAAE,UAAU;MACpBC,YAAY,EAAE,CAAC;MACfC,QAAQ,EAAE,QAAQ;MAClBC,OAAO,EAAE,oBAAoB;MAC7BC,SAAS,EAAEhE,KAAK,IAAIJ,QAAQ,GAAG,GAAG8D,cAAc,0BAA0B,GAAG,MAAM;MACnFO,UAAU,EAAE,eAAe;MAC3B,SAAS,EAAE;QACTC,SAAS,EAAE,aAAanE,KAAK;MAC/B;IACF,CAAE;IAAAoE,QAAA,eAEFzE,OAAA;MACE0E,GAAG,EAAEjE,SAAU;MACfgB,KAAK,EAAE;QACLkD,OAAO,EAAE,OAAO;QAChBxE,KAAK,EAAE,MAAM;QACbC,MAAM,EAAE;MACV;IAAE;MAAAwE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACvE,EAAA,CAlKIP,eAA+C;AAAA+E,EAAA,GAA/C/E,eAA+C;AAoKrD,eAAeA,eAAe;AAAC,IAAA+E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}